README file for Programming Assignment 3
========================================

Your directory should now contain the following files:

 build.xml
 PA3.pdf
 cool-manual.pdf
 README
 cool.cup
 bad.cl
 good.cl
 tests/*
 compare-parser.py
 coolc.py
 parser.py
 mycoolc.py
 myparser.py
 runmips.py
 coolc.jar
 trap_handler.mars
 cool-tree.java
 cool-tree.aps
 AbstractSymbol.java
 AbstractTable.java
 BoolConst.java
 CgenClassTable.java	  
 CgenNode.java
 CgenSupport.java
 ClassTable.java
 CoolParser.java
 CoolTokenLexer.java
 Flags.java
 IdSymbol.java
 IdTable.java
 IntSymbol.java
 IntTable.java
 ListNode.java
 Parser.java
 StringSymbol.java
 StringTable.java
 SymbolTable.java
 TokenConstants.java
 TreeConstants.java
 TreeNode.java
 Utilities.java
 *.java			  other generated files

	The build.xml contains targets for compiling and running your
	program. DO NOT MODIFY.
   
	PA3.pdf is the specification of the third programming assignment.
	Please read it carefully.

	The README contains this info. Part of the assignment is to
	fill in the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and why
	your test cases are adequate. It is part of the assignment to
	clearly and concisely explain things in text as well as to comment
	your code. Just edit this file.

	cool.cup is the skeleton for the parser specification that you
	are to write. It already contains productions for the program
	and the classes. Use them as an example to write the remaining
	productions.  You should also read the CUP documentation.
	This skeleton will compile and run as is, but it doesn't
	do much.

	good.cl, bad.cl test a few features of the grammar. You should
	add tests to ensure that good.cl exercises every legal
	construction of the grammar and that bad.cl exercises as many
	different parsing errors as you can squeeze into one file.

	tests is a directory containing ten test cases. DO NOT MODIFY.

	cool-tree.aps contains the definitions for the tree language
	which you use to construct the abstract syntax tree (AST).  From
	this file, cool-tree.java is automatically generated by a
	utility that compiles the specification into Java classes for
	constructing tree nodes.  This file is provided for your
	reference.  DO NOT MODIFY.

        TreeNode.java and ListNode.java contain definitions used by the
        tree package. DO NOT MODIFY.  

        Parser.java contains a driver to test the parser. DO NOT MODIFY.

	Flags.java implements routines for parsing command line
	flags. DO NOT MODIFY.

        tests is a directory containing ten test cases with expected outputs.
        DO NOT MODIFY.

        The rest of the files are created as byproducts of `CUP', or
        are internal parser support files.  DO NOT MODIFY.
        `CoolParser.java' is the generated Java file containing the
        parser.  DO NOT MODIFY this file directly; instead, edit
        cool.cup and this file will be regenerated automatically.

	myparser.py and parser.py are a python script driveing the parser.
	compare-parser.py is a python script which compares the outcome
	of your parser with the reference. DO NOT MODIFY.

	Files not discussed are covered in the README for PA2.

Instructions
------------

	To compile your parser program type:

	% ant parser

	To test your parser on a file 'foo.cl' type

	% python myparser foo.cl

	myparser is a shell script that "glues" together lexer and
	parser using pipes.  Don't worry if the line numbers you get by
	running Java version of the parser are slightly off as compared
	to the "official" parser.

	To run your parser on the files good.cl and bad.cl type:

	% ant test

        To run ten examples in tests directory type:

        % ant test-all

	If you think your parser is correct and behaves like
	the one we wrote, you may want to run a COOL compiler using
	your parser:

	% python mycoolc.py foo.cl

        To run the reference parser on a file 'fool.cl':

        % pythone parser.py foo.cl

        To easily compare your parser and the reference parser:

        % python compare-parser.py foo.cl

        This will create a diff file (fool.cl.diff), when two parsers
	disagree.

	To turn in your work type:

	% ant submit-clean

	And run the "submit PA3" program. This will automatically collect the
	files good.cl, bad.cl, good.output, bad.output, README, and cool.cup 
        file. Don't forget to edit this README file to include your write-up, 
        and to write your own test cases in good.cl and bad.cl.

 	You may turn in the assignment as many times as you like.
	However, only the last version will be retained for
	grading.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA3
----------------

Design decisions

1. We use 'list', 'cases' to handle features, formals, and other definitions which is complicated.
   By using this, we can make the program much easier.

i.e.
formal
	::= OBJECTID:o COLON TYPEID:t
		{: RESULT = new formalc(curr_lineno(),o,t); :}
	;

formal_list
	::= formal:f 
		{: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
	| formal_list:fl COMMA formal:f
		{: RESULT = fl.appendElement(f); :}
	;

formals
	::= LPAREN RPAREN
		{: RESULT = new Formals(curr_lineno()); :}
	| LPAREN formal_list:fl RPAREN
		{: RESULT = fl; :}
	;

2. We give the right precedence to handle the conflict

precedence left LET_STMT;
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left MINUS, PLUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

3. We handle the let ambiguity by introducing the highest precedence of LET_STMT.
   Then we use the Contextual Precedence to make sure that we can match the expersions as right as possible.

4. We carfully follow the Manual of Cool and the PA3 specification to put all the language in our program.

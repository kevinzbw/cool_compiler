/*
 * cool.cup
 *
 * CS164: Spring 2004 
 * Programming Assignment 3
 *
 * Parser definition for the Cool language.
 *
 */

import java_cup.runtime.*;

/* Code enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

:} 

/************************************************************************/
/*                DON'T CHANGE ANYTHING IN THIS SECTION                 */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}


/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */
terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WON'T WORK      */
/**************************************************************************/


/*
 * Declare types for the grammar's non-terminals.
 *
 * Hint: You will have to add/modify this list.
 */
nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class_cc;
nonterminal Features optional_feature_list;
nonterminal Expression expr;
nonterminal Expressions actuals, exp_list, exprlist, block;

/*
 * Add by Myself	
 */
nonterminal Feature attr_feature;
nonterminal Feature method_feature;
//nonterminal Features attr_feature_list;
nonterminal Formal formal;
nonterminal Formals formal_list,formals;
nonterminal Case kase;
nonterminal Cases kases;
nonterminal let let_expr;

nonterminal Expression let_optional_assign;


/*
 * Precedence declarations.
 */
/*** FILL-IN HERE ***/
precedence left LET_STMT;
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left MINUS, PLUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;




/***********************************************************************
 * Grammar rules.                                                      *
 *                                                                     *
 * Some parts of rules have been provided for you as an example and    *
 * to get you started.  You should not need to modify this code to get *
 * a working solution, but you are welcome to if you like.  However,   *
 * do not assume that any particular rule is complete.                 *
 ***********************************************************************/

/* Program */
program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
	| error
	    {: RESULT = new programc(curr_lineno(),
                                     new Classes(curr_lineno())); :}
        ;


class_list
	/* single class */
	::= class_cc:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class_cc:c
	    {: RESULT = cl.appendElement(c); :}

	//error handle: recover after the end of error class
	| class_list:cl error SEMI
		{: RESULT = cl; :}
	;


/* Class declarations
 *
 * If no parent is specified, the class inherits from the Object class.
 */
class_cc
	::= CLASS TYPEID:n LBRACE optional_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                    AbstractTable.idtable.addString("Object"), 
				    f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE optional_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	;

//case
kase 
	::= OBJECTID:o COLON TYPEID:t DARROW expr:e SEMI
		{: RESULT = new branch(curr_lineno(),o,t,e); :}
	;

kases
	::= kase:k
		{: RESULT = (new Cases(curr_lineno())).appendElement(k); :}
	| kases:ks kase:k 
		{: RESULT = ks.appendElement(k); :}
	;

formal
	::= OBJECTID:o COLON TYPEID:t
		{: RESULT = new formalc(curr_lineno(),o,t); :}
	;

formal_list
	::= formal:f 
		{: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
	| formal_list:fl COMMA formal:f
		{: RESULT = fl.appendElement(f); :}
	;

formals
	::= LPAREN RPAREN
		{: RESULT = new Formals(curr_lineno()); :}
	| LPAREN formal_list:fl RPAREN
		{: RESULT = fl; :}
	;

attr_feature 
	::= OBJECTID:o COLON TYPEID:t
		{: RESULT = new attr(curr_lineno(),o,t,new no_expr(curr_lineno()));:}
	| OBJECTID:o COLON TYPEID:t ASSIGN expr:e
		{: RESULT = new attr(curr_lineno(),o,t,e); :}
	;

method_feature
	::= OBJECTID:o formals:f COLON TYPEID:t LBRACE expr:e RBRACE
		{: RESULT = new method(curr_lineno(),o,f,t,e); :}
	;


optional_feature_list
	::= /* empty */ 
	    {: RESULT = new Features(curr_lineno()); :}
	| optional_feature_list:ofl method_feature:mf SEMI
		{: RESULT = ofl.appendElement(mf); :}
	| optional_feature_list:ofl attr_feature:af SEMI
		{: RESULT = ofl.appendElement(af); :}
	//error handle: recorver to the next feature.
	| optional_feature_list:ofl error SEMI
		{: RESULT = ofl; :}

	;
/*
attr_feature_list
	::= attr_feature:f
		{: RESULT = new Features(curr_lineno()).appendElement(f); :}
	| attr_feature_list:fl COMMA attr_feature:f
		{: RESULT = fl.appendElement(f); :}
	;*/


/* Expressions */
expr
	::= expr:e1 PLUS expr:e2
	    {: RESULT = new plus(curr_lineno(), e1, e2); :}
	| expr:e1 MINUS expr:e2
	    {: RESULT = new sub(curr_lineno(), e1, e2); :}
	| expr:e1 MULT expr:e2
	    {: RESULT = new mul(curr_lineno(), e1, e2); :}
	| expr:e1 DIV expr:e2
	    {: RESULT = new divide(curr_lineno(), e1, e2); :}
	| NEG expr:e
	    {: RESULT = new neg(curr_lineno(), e); :}
	| expr:e1 LT expr:e2
	    {: RESULT = new lt(curr_lineno(), e1, e2); :}
	| expr:e1 EQ expr:e2
	    {: RESULT = new eq(curr_lineno(), e1, e2); :}
	| expr:e1 LE expr:e2
	    {: RESULT = new leq(curr_lineno(), e1, e2); :}
	| NOT expr:e
	    {: RESULT = new comp(curr_lineno(), e); :}
	| LPAREN expr:e RPAREN
	    {: RESULT = e; :}
	| INT_CONST:i
	    {: RESULT = new int_const(curr_lineno(), i); :}
	| STR_CONST:s
	    {: RESULT = new string_const(curr_lineno(), s); :}
	| BOOL_CONST:b
	    {: RESULT = new bool_const(curr_lineno(), b); :}
	| OBJECTID:o
	    {: RESULT = new object(curr_lineno(), o); :}
	| OBJECTID:n LPAREN actuals:a RPAREN
	    {: RESULT = new dispatch(curr_lineno(),
	                             new object(curr_lineno(), 
	                                        AbstractTable.idtable.addString("self")),
				     n, a); :}
	
	/*
	 * Added by Myself
	 */

	| expr:e DOT OBJECTID:n LPAREN actuals:a RPAREN
    	{: RESULT = new dispatch(curr_lineno(),e,n,a);:}

    | expr:e AT TYPEID:t DOT OBJECTID:n LPAREN actuals:a RPAREN
    	{: RESULT = new static_dispatch(curr_lineno(),e,t,n,a);:}

	| WHILE expr:e1 LOOP expr:e2 POOL
		{: RESULT = new loop(curr_lineno(),e1,e2);:}
    
    | IF expr:e1 THEN expr:e2 ELSE expr:e3 FI
    	{: RESULT = new cond(curr_lineno(),e1,e2,e3);:}

    | OBJECTID:o ASSIGN expr:e
    	{: RESULT = new assign(curr_lineno(),o,e);:}

    | NEW TYPEID:t
    	{: RESULT = new new_(curr_lineno(),t);:}

    | block:b
    	{: RESULT = new block(curr_lineno(),b); :}	

    | ISVOID expr:e
    	{: RESULT = new isvoid(curr_lineno(),e); :}
    | CASE expr:e OF kases:kl ESAC
    	{: RESULT = new typcase(curr_lineno(),e,kl); :}

    | LET let_expr:le
    	{: RESULT = le; :}
    %prec LET_STMT 
    ;

/* let_expr */
let_expr
	::= OBJECTID:o COLON TYPEID:t let_optional_assign:loa IN expr:e
	    {: RESULT = new let(curr_lineno(), o, t, loa, e); :}
	  
	| OBJECTID:o COLON TYPEID:t let_optional_assign:loa COMMA let_expr:le
	    {: RESULT = new let(curr_lineno(), o, t, loa, le); :}
	//error handle: recover to the next 
	| error COMMA let_expr:le
		{: RESULT = le; :}
	;

let_optional_assign
	::= /* empty */
	  	{: RESULT = new no_expr(curr_lineno()); :}
	| ASSIGN expr:e
		{: RESULT = e; :}
	; 
	 
    	
    	
/* Block of expressions */
block
	::= LBRACE RBRACE
		{: RESULT = new Expressions(curr_lineno()); :}
	| LBRACE exprlist:el RBRACE
		{: RESULT = el ;:}

	//error handle: recover after the end of the block
	| LBRACE error RBRACE
		{: RESULT = new Expressions(curr_lineno()); :}
	;

/* Non-empty list of expression devide with SEMI */ 
exprlist

	::= expr:e SEMI
		{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| exprlist:el expr:e SEMI
		{: RESULT = el.appendElement(e); :}
	;

/* Method arguments */
actuals
        /* No arguments */
	::= /* empty */
	    {: RESULT = new Expressions(curr_lineno()); :}
        /* List of arguments */
	| exp_list:el
	    {: RESULT = el; :}
	;


/* Non-empty list of expressions */
exp_list
        /* One expression */
	::= expr:e
	    {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :} 
        /* Several expressions */
	| exp_list:el COMMA expr:e
	    {: RESULT = el.appendElement(e); :}
	;




